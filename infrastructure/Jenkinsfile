pipeline {
  agent any
  options {
    disableConcurrentBuilds()
  }
  stages {
    stage('Pre-Build') {
        environment {
            API_URL = 'https://zubr.club'
        }
        steps {
            sh 'dir'
            sh 'envsubst < apps/zubr-web/src/environments/env.dist.ts > apps/zubr-web/src/environments/env.ts'
            sh 'cat apps/zubr-web/src/environments/env.ts'
            stash includes: 'apps/zubr-web/src/environments/**', name: 'env'
        }
    }
    stage('Build') {
        agent {
            docker {
                image 'node:12.16.3'
            }
        }
        environment {
            API_URL = 'https://zubr.club'
            HOME = '.'
            npm_config_cache = 'npm-cache'
        }
        steps {
            sh 'npm ci'
            sh 'npm run test'
            unstash 'env'
            sh 'dir apps/zubr-web/src/environments'
//             sh 'npm run lint'
            sh 'npm run web:prod'

            stash includes: 'dist/apps/zubr-web/**', name: 'output'
            stash includes: 'infrastructure/*', name: 'infra'
        }
    }
    stage('Deploy') {
        environment {
                DIGITALOCEAN_ACCESS_TOKEN = credentials('DIGITALOCEAN_ACCESS_TOKEN')
                def HOSTS = sh(
                    script: "doctl compute droplet list --format PublicIPv4 --no-header --tag-name zubr_in| tr '\n' ','",
                    returnStdout: true
                ).trim()
        }
        steps {
            unstash 'infra'
            unstash 'output'
            ansiblePlaybook(
               playbook: 'infrastructure/ansistrano_master_deploy.yml',
               inventory: "$HOSTS",
               credentialsId: "SSH_PRIVATE_KEY",
               hostKeyChecking: false
           )
        }
    }
  }
}

